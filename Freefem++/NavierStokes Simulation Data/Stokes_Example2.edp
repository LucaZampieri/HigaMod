///////////////////////////
// DEFINE CLOCK VARIABLE //
///////////////////////////

real s0 = clock();

/////////////////////////////////////////
// DEFINITION OF SIMULATION PARAMETERS //
/////////////////////////////////////////

real Pinf = 2;
real Pout = 0;
real dP   = Pinf - Pout;
real nu   = 1;
real L    = 5;
real R    = 0.5;

/////////////////////////////
// CREATE RECTANGULAR MESH //
/////////////////////////////

real maxHor=5;
real minHor=0;
real maxVer=1;
real minVer=0;
int N = 100;
int numbHorNodes = N;
int numbVerNodes = N;

real xx1 = minHor;
real xx2 = maxHor;
real xx3 = maxHor;
real xx4 = minHor;

real yy1 = minVer;
real yy2 = minVer;
real yy3 = maxVer;
real yy4 = maxVer;

border aa(t=0,1) {x = xx1 + t * ( xx2 - xx1 ); y = yy1 + t * ( yy2 - yy1 ); label=1;}
border bb(t=0,1) {x = xx2 + t * ( xx3 - xx2 ); y = yy2 + t * ( yy3 - yy2 ); label=2;}
border cc(t=0,1) {x = xx3 + t * ( xx4 - xx3 ); y = yy3 + t * ( yy4 - yy3 ); label=3;}
border dd(t=0,1) {x = xx4 + t * ( xx1 - xx4 ); y = yy4 + t * ( yy1 - yy4 ); label=4;}
mesh Th=buildmesh( aa(numbVerNodes) + bb(numbHorNodes) + cc(numbVerNodes) + dd(numbHorNodes) );

////////////////////////////////////////////////////
// GENERATE THE FUNCTIONAL SPACE FOR THE VELOCITY //
////////////////////////////////////////////////////

fespace Xh(Th,P2);
Xh u1,u2,v1,v2;

//////////////////////////////////////////////////
// DEFINE THE FUNCTIONAL SPACE FOR THE PRESSURE //
//////////////////////////////////////////////////

fespace Mh(Th,P1);
Mh p,q;

//////////////////////////////////
// DEFINITION OF INFLOW PROFILE //
//////////////////////////////////

real a0 = 0;
real a1 = (dP * R) / (2 * nu * L);
real a2 = (-1 * dP) / (4 * nu * L);

func h = a0 + a1 * y + a2 * y^2;
func g = a1;

///////////////////////////////////////////////
// DEFINE THE COMPONENTS OF THE FORCING TERM //
///////////////////////////////////////////////

// REACTION TERM TO CONSIDER THE TIME DEPENDENCE

func sigma = 0.0;

// STABILITY TERM TO COMPENSATE FOR PRESSURE SATURATION

func delta = 1e-6;

// FORCING COMPONENTS

func f1 = 0;
func f2 = 0;

/////////////////////////////////////////////////
// DEFINITION OF MACROS FOR THE SOTKES PROBLEM //
/////////////////////////////////////////////////

macro dXX(uX)     dx(uX) //
macro dYY(uY)     dy(uY) //
macro dXY(uX,uY)  (dy(uX) + dx(uY))/2.0 //

/////////////////////////////////////
// DEFINTION OF THE STOKES PROBLEMÂ //
/////////////////////////////////////

problem Stokes ([u1,u2,p],[v1,v2,q],solver=Crout) =
int2d(Th)(
  2 * nu * (dXX(u1) * dXX(v1))
  + 2 * nu * (dYY(u2)*dYY(v2))
  + 2 * nu * (dXY(u1,u2)*dXY(v1,v2))
  + 2 * nu * (dXY(u1,u2)*dXY(v1,v2))
  + u1 * v1 * sigma
  + u2 * v2 * sigma
  + p * q * delta
  - p * dx(v1)
  - p * dy(v2)
  - dx(u1) * q
  - dy(u2) * q
  )
+ int2d(Th)(
  - f1 * v1
  - f2 * v2
  )
+ on(1,2,3,4, u2 = 0)
+ on(2,4, u1 = h)
+ on(1,3, u1 = 0);

///////////////////////////////////////////////////////////
// SOLUTION OF THE STOKES SOLVER WITH TRADITIONAL SOLVER //
///////////////////////////////////////////////////////////

Stokes;

/////////////////////////////////////////////////////////////////////
// PLOT THE SOLUTION OF THE STOKES PROBLEM WITH TRADITIONAL SOLVER //
/////////////////////////////////////////////////////////////////////

plot(p , ps = "StokesPressure.eps" , value = 1 , wait = 1);
plot(coef = 0.2 , cmm = "Stokes" , p , [u1,u2] , ps = "StokesP2p.eps" , value = 1 , wait = 1);

/////////////////////////////////////////////////
// COMPUTE THE MASS MATRIX - VELOCITY SOLUTION //
/////////////////////////////////////////////////

varf mass(u,v) = int2d(Th) ( u * v );
matrix Mu = mass(Xh,Xh);

//////////////////////////////////////////////////////
// COMPUTE THE STIFFNESS MATRIX - VELOCITY SOLUTION //
//////////////////////////////////////////////////////

varf stiff(u,v) = int2d(Th) ( dx(u) * dx(v) + dy(u) * dy(v));
matrix Au = stiff(Xh,Xh);

/////////////////////////////////////////////////
// COMPUTE THE MASS MATRIX - PRESSURE SOLUTION //
/////////////////////////////////////////////////

varf mass(u,v) = int2d(Th) ( u * v );
matrix Mp = mass(Mh,Mh);

//////////////////////////////////////////////////////
// COMPUTE THE STIFFNESS MATRIX - PRESSURE SOLUTION //
//////////////////////////////////////////////////////

varf stiff(u,v) = int2d(Th) (dx(u)*dx(v) + dy(u)*dy(v));
matrix Ap = stiff(Mh,Mh);

////////////////////////
// SAVE THE MESH FILE //
////////////////////////

savemesh(Th,"ffMesh.msh");

/////////////////////
// EXPORT MATRICES //
/////////////////////

// STIFFNESS MATRIX - VELOCITY SOLUTION

{
	ofstream fout("Au.txt");
	fout << Au << endl;
}

// STIFFNESS MATRIX - PRESSURE SOLUTION

{
	ofstream fout("Ap.txt");
	fout << Ap << endl;
}

// MASS MATRIX - VELOCITY SOLUTION

{
	ofstream fout("Mu.txt");
	fout << Mu << endl;
}

// MASS MATRIX - PRESSURE SOLUTION

{
	ofstream fout("Mp.txt");
	fout << Mp << endl;
}

/////////////////////////////////////////////////////////////////
// EXPORT THE COMPONENTS OF THE SOLUTION OF THE STOKES PROBLEM //
/////////////////////////////////////////////////////////////////

load "medit"
savesol("ffSolUx.sol",Th,u1);
savesol("ffSolUy.sol",Th,u2);
savesol("ffSolP.sol",Th,p);

/////////////////////////////////////////////
// FINISHED SOLUTION OF THE STOKES PROBLEM //
/////////////////////////////////////////////

cout << endl;
cout << "------------------------------------------" << endl;
cout << "   FINISHED SIMULATION - STOKES PROBLEM   " << endl;
cout << "------------------------------------------" << endl;

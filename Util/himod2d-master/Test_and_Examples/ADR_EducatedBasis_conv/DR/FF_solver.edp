/*
	Matteo Aletti
	teo.aletti@gmail.com
*/

// Creating a mesh on [0,6]X[0,1]
int N=100;
	border aa(t=0,1) {x=6*t; y=0; label=1;}
	border bb(t=0,1) {x=6; y=t; label=2;}
	border cc(t=0,1) {x=6-6*t; y=1; label=3;}
	border dd(t=0,1) {x=0; y=1-t; label=4;}
mesh Th=buildmesh( aa(6*N) + bb(N) + cc(6*N) + dd(N) );

real mu,beta1,beta2,sigma,chi,datoup,datodown;
	
	mu=1.;
	beta1=20.;
	beta2=0.;
	sigma=0.;
	chi=3.;

	datoup=0.05;
	datodown=chi*0.06;

real A,C,b;

	b=0.01; 
	C=(datodown+mu*b)/chi;
    A=datoup-b-C;
func uin = A*y*y + b*y + C + 0.*x;
func force = 10.*(((x-1.5)*(x-1.5)+0.4*(y-0.25)*(y-0.25)<0.01)+((x-1.5)*(x-1.5)+0.4*(y-0.75)*(y-0.75)<0.01));

fespace Vh(Th,P2);
Vh u,v;

problem DirichletRobin(u,v)=

		int2d(Th)     ( mu*( dx(u)*dx(v) + dy(u)*dy(v) ) )  // Laplacian operator
		+ int2d(Th)   ( beta1*dx(u)*v )						// Advection in x direction
		+ int2d(Th)   ( beta2*dy(u)*v )						// Advection in y direction
		+ int2d(Th)   ( sigma*u*v     )						// Reaction
		+ int1d(Th,1) ( chi*u*v       )						// Robin Functional
		- int1d(Th,1) ( datodown*v    )						// Force due to Robin down
		- int2d(Th)   ( force*v       )						// Force term
		+ on(4,u=uin)										// Dirichlet Inflow
		+ on(3,u=datoup);									// Dirichlet su lato up.
		
cout<<"h= "<<1./N<<endl;
DirichletRobin;

{
	ofstream file("DR_monodom_FF.mtv");
	int i, j;
	// INTESTAZIONE PLOTMTV
	file << "$ DATA=CONTCURVE " << endl;
	file << "% contstyle=3" << endl;
	//file << "% toplabel= \"FreeFem\" " << endl;
	//file << "% xlabel= \"x\" " << endl;
	//file << "% ylabel= \"y\" " << endl;
	//file << "% zlabel= \"y\" " << endl;
	file << "% axisguides=false" << endl;
	file << "% contfill=true"<<endl;
	// MESH E SOLUZIONE
	for (i=0;i<Th.nt;i++)
	{
	 	for (j=0;j<3;j++)
			{
				file << Th[i][j].x << " " << Th[i][j].y << " " << u(Th[i][j].x,Th[i][j].y) << endl;
			}
		file << endl;
	}
	file << "$ END" << endl;
}

plot(u,fill=false,wait=1);

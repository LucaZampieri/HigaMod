// Upanddown.edp
macro YY(tt,xx,yhat)      (yhat + sin(2.*tt)/5. + (yhat*sin(2.*tt))/5.)//  
macro YHAT(tt,xx,yy)      ((yy-0.2*sin(2.*t))/(0.2*sin(2.*t)+1.)) //
macro JHAT(tt,xx,yhat)    (1./(0.2*sin(2.*t)+1.)) //
macro invJHAT(tt,xx,yhat) (0.2*sin(2.*t)+1.) //

//Setting grafico
real cmin=-0.04;
real cmax=0.1;

real niso=20;
real cstep=(cmax-cmin)/(niso-1.0);
real[int] viso(niso);
for (int c=0;c<niso;c++)
{
    viso[c]=cmin+c*cstep;
}

//Creazione mesh per il dominio al tempo t=0;
int nelem = 100;
real L=6;
mesh Th=square(nelem*L,nelem,[x*L,2*y-1]);
savemesh(Th,"data/referencedomain.msh");

//Definizione spazi e funzioni principali
fespace Vh(Th,P1);
Vh u, v, uold;

//Forma bilineare
real mu    = 1.;
real betax = 10.;
real betay = 0.;
real sigma = 1.;
real dt    = 0.1;

//Inizializzazioni ciclo temporale
real t=0;
uold=0;
int ntimestep=50;

//Ciclo temporale
for (int k=0;k<ntimestep;k++)
{  
    t=t+dt;

    func w = 2./5.*cos(2.*t)*(1.+y); // definita su yhat
    func f = 10.*((x-0.5)*(x-0.5) + 0.4*YY(t,x,y)*YY(t,x,y) < 0.01 );

    // solution of the problem
    problem wavyunsteady(u,v)=
          int2d(Th) ( invJHAT(t,x,y)*mu*(dx(u)*dx(v) + JHAT(t,x,y)*JHAT(t,x,y)*dy(u)*dy(v))) 	//Diff
        + int2d(Th) ( invJHAT(t,x,y)*(betax*dx(u)*v  + ( betay - w )*JHAT(t,x,y)*dy(u)*v)) 		//Adv
        + int2d(Th) ( invJHAT(t,x,y)*sigma*u*v)                     							//Reaction
        + int2d(Th) ( invJHAT(t,x,y)*u*v/dt)                        							//Mass-->time
        - int2d(Th) ( invJHAT(t,x,y)*uold*v/dt)                     							//Mass rhs -->time
        - int2d(Th) ( invJHAT(t,x,y)*f*v)                           							//Force
        + on(1,u=0)                                  											//Dirichlet on bottom
        + on(3,u=0);                                 											//Dirichlet on top, neumann on inflow/outflow
    wavyunsteady;
  

    // post process for the video
    //plot(u,fill=1,viso=viso,value=true);
    {
        ofstream file("data/movingffem"+k+".dat"); 
        file << "0 0 0 "<< u[].n << " 0 \n"; 
        for (int j=0;j<u[].n ; j++)
            file << u[][j] << endl;
    }

	// Export for python
	real n=nelem;
	real h=1./n;
	real[int] meshx(3*6*n);
	for (int i=0;i<6*n;i++)
	{	
		meshx[3*i]=i*h;
		meshx[3*i+1]=i*h+h/2.;
		meshx[3*i+2]=i*h+h;
	}
	if(k==9||k==19||k==29||k==39||k==49)
	{
		ofstream file("DDFF"+t+".out");
		file.scientific;
		file.precision(7);
		int i, j;
		int M=60;
		int NN=6*n*3;
		file <<"            "<<NN<<endl;
		file <<"             "<<M<<endl;
		real Xcoord=0.0;
		real Ycoord=0.0;
		real Yhat=0.0;
		for ( int k=1;k<=n*6;k++)
		{
		       
		    for (int j=1;j<=M;j++)
		    {
		        Xcoord=meshx[ (k-1)*3 + 0];
		        Yhat=2.*(j-1.)/(M-1.)-1;
		        Ycoord = YY(t,Xcoord,Yhat);
		        file<<"       "<<Xcoord<<"       "<<Ycoord<<"       "<<u(Xcoord,Yhat)<<endl;
		    }
		    for (int j=1;j<=M;j++)
		    {
		        Xcoord=meshx[ (k-1)*3 +1];
		        Yhat=2.*(j-1.)/(M-1.)-1;               
		        Ycoord = YY(t,Xcoord,Yhat);
        	    file<<"       "<<Xcoord<<"       "<<Ycoord<<"       "<<u(Xcoord,Yhat)<<endl;
      		}
		    for (int j=1;j<=M;j++)
		    {
		        Xcoord=meshx[ (k-1)*3 +2];
		        Yhat=2.*(j-1.)/(M-1.)-1;
		        Ycoord = YY(t,Xcoord,Yhat);
		        file<<"       "<<Xcoord<<"       "<<Ycoord<<"       "<<u(Xcoord,Yhat)<<endl;
		    }
		}
	}
    // update u_old
    uold=u;
}
